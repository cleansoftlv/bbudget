@page "/transactions"
@page "/transactions/unreviewed"
@using LMApp.Models
@using LMApp.Models.Account
@using LMApp.Models.Categories
@using LMApp.Models.Transactions
@using LMApp.Models.UI
@inject IHttpClientFactory HttpClientFactory
@inject FormatService formatService

@layout FullLayout
@inherits BaseTransactionPage


<PageTitle>@(ShowUnreviewed ? "Unreviewed Transactions" : "Transactions")</PageTitle>

<LoadingPanel IsLoading="IsLoading" ErrorMessage="@LoadError" OnRetry="ReloadOnError">
    <div class="container-fluid p-0 px-lg-1 px-xl-2">
        <div class="row g-0 gx-lg-1 gx-xl-2">
            <div class="@TransactionListClass()">
                <div class="ui-panel" id="first-ui-panel">
                    <div class="@($"{(Transactions != null && Transactions.Any() ? "with-button" : null)} p-header xs {(ShowUnreviewed ? "xs-with-nav" : null)}")">
                        <MobileTabNav />
                        <div class="@($"{(!ShowUnreviewed ? "sm" : null)} header-text")">
                            @(ShowUnreviewed ? "Unreviewed Transactions" : "Transactions")
                        </div>
                        @if (Transactions != null && Transactions.Any())
                        {
                            <Button Icon="fas fa-download" Color="Color.Secondary" IsOutline="true" class="icon-btn ms-auto"
                                    OnClick="ShowExportModal" title="Export Transactions" />
                        }
                    </div>
                    <LoadingPanel IsLoading="@(Transactions == null)" ErrorMessage="@LoadTransactionsError" OnRetry="RetryLoadTransactions">
                        <InfiniteScroll class="p-body px-0" OnScrollEnd="OnTranListScrollEnd">
                            <TransactionList @ref="transactionListRef" 
                                             Transactions="@Transactions"
                                             HasMore="HasMoreTrans"
                                             LoadMoreLoadError="@LoadMoreTransactionsError"
                                             ListContext="TransactionListContext.None"
                                             LoadingMore="LoadingMoreTrans"
                                             ActiveTransactionId="SelectedTransaction?.Id"
                                             TransactionSelected="NavigateToTransaction"
                                             OnLoadMore="LoadMoreTransactions" />
                        </InfiniteScroll>
                    </LoadingPanel>
                </div>
            </div>
            <div class="@TransactionFormClass()">
                <div class="ui-panel @(TranFormClosing ? "closing" : null)" id="second-ui-panel">
                    <div class="p-header with-button">
                        <Button Icon="fa-solid fa-xmark" Color="Color.Secondary" IsOutline="true" class="icon-btn" OnClick="CloseTranForm" />
                        <div class="header-text">
                            Transaction
                        </div>
                    </div>
                    <div class="p-body">
                        <LoadingPanel IsLoading="@(TransactionInEdit == null)"
                                      ErrorMessage="@LoadSingleTransactionError"
                                      OnRetry="RetryShowTransaction">
                            <TransactionForm Transaction="@TransactionInEdit"
                                             SaveTransaction="t => SaveTransaction(t)"
                                             SaveTransactionAndNext="SaveTransactionAndNext"
                                             NavigateLeft="FocusTranList"
                                             CreateTransfer="CreateTransfer"
                                             SaveError="@SaveTransactionError"
                                             Ungroup="UngroupWithConfirm"
                                             Copy="CopyTransaction"
                                             Delete="DeleteTransaction"
                                             ShowAndNextOnSave="@(ShowUnreviewed && TransactionInEdit.Id != 0)"
                                             NextTransaction="NavigateToNext"
                                             IsSaving="IsSaving"
                                             Cancel="CloseTranForm" />
                        </LoadingPanel>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!ShowTranForm)
    {
        <div class="new-btn-container">
            <Button Icon="fa-solid fa-plus" Color="Color.Primary" class="rounded-circle" OnClick="NavigateToNewTransaction" />
        </div>
    }
</LoadingPanel>

<ExportModal @ref="exportModal"
             Transactions="Transactions"
             HasMoreTransactions="HasMoreTrans"
             LoadMoreErrorMessage="@LoadMoreTransactionsError"
             IsLoadingMore="LoadingMoreTrans"
             OnLoadMore="LoadMoreTransactions" />

@code {

    private bool ShowUnreviewed;

    private string TransactionListClass()
    {
        if (ShowTranForm)
        {
            return "col-12 d-none col-lg-6 d-lg-block col-xxl-4 offset-xxl-2";
        }
        else
        {
            return "col-12 col-lg-6 offset-lg-3 col-xxl-4 offset-xxl-4";
        }
    }

    private string TransactionFormClass()
    {
        if (ShowTranForm)
        {
            return "col-12 col-lg-6 d-lg-block col-xxl-4";
        }
        else
        {
            return "d-none";
        }
    }

   

    protected override void RefreshActivePage()
    {
        if (ShowTranForm)
        {
            userService.SetActivePageState("Transaction", true);
        }
        else
        {
            userService.ClearActivePageState();
        }
    }

    private async Task ActiveBageBack()
    {
        if (ShowTranForm)
        {
            await CloseTranForm();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (LoadCancelled)
        {
            return;
        }
        userService.SetActivePageBackHandler(EventCallback.Factory.Create(this, ActiveBageBack));
    }


    protected override async Task OnParametersSetAsync()
    {
        if (LoadCancelled || userService.CurrentAccount == null)
            return;

        if (!navigationManager.UriStartsWith("transactions"))
            return;

        var oldShowUnreviewed = ShowUnreviewed;
        ShowUnreviewed = navigationManager.RelativeUriPathEquals("transactions/unreviewed");

        await LoadTransactions();
        await base.OnParametersSetAsync();
    }

    protected override void PrepareNewTransaction(SimpleTransactionForEdit tran)
    {
    }

    protected override async Task CloseTranForm()
    {
        await base.CloseTranForm();

        // Focus the transaction list after closing transaction form
        if (transactionListRef != null)
        {
            await Task.Yield(); // Let Blazor render the changes
            await transactionListRef.FocusAsync();
        }
    }

    protected override async Task AddNewSplitTransaction(SplitTransactionForEdit split)
    {
        var tran = await transactionsService.GetTransactionAsync(split.Id);
        if (tran == null)
            return;
        AddNewTransaction(tran, split);

        split.SavedTransaction = tran.Transaction;
    }

    private async Task RetryLoadTransactions()
    {
        await LoadTransactions(force: true);
    }

    private bool? DisplayingUnreviewed = null;

    private async Task LoadTransactions(bool force = false)
    {
        if (DisplayingUnreviewed == ShowUnreviewed
            && !force)
            return;

        LoadTransactionsError = null;
        Transactions = null;
        DisplayingUnreviewed = ShowUnreviewed;

        try
        {
            var res = await transactionsService.GetAllTransactionsAsync(
                status: ShowUnreviewed ? ClientConstants.TransactionStatusUncleared : null
            );

            if (DisplayingUnreviewed != ShowUnreviewed)
                return;

            UnfilteredTransactionCount = res.Transactions.Count;
            Transactions = FilterTransactions(res.Transactions).ToList();
            HasMoreTrans = res.HasMore;
        }
        catch (HttpRequestException ex)
        {
            if (DisplayingUnreviewed != ShowUnreviewed)
                return;

            ex.LogIfRequired(log);
            LoadTransactionsError = ex.GetDescriptionForUser();
        }
    }

    protected override async Task LoadMoreTransactions()
    {
        HasMoreTrans = false;
        LoadingMoreTrans = true;
        LoadMoreTransactionsError = null;

        GetTransactionsResult res;
        bool showUnreviewed = ShowUnreviewed;
        try
        {
            res = await transactionsService.GetAllTransactionsAsync(
                   status: showUnreviewed ? ClientConstants.TransactionStatusUncleared : null,
                   offset: Math.Max(0, UnfilteredTransactionCount - ClientConstants.OverlapOffsetForTransactions));
        }
        catch (HttpRequestException ex)
        {
            if (showUnreviewed != ShowUnreviewed)
            {
                return;
            }

            ex.LogIfRequired(log);
            LoadMoreTransactionsError = ex.GetDescriptionForUser();
            LoadingMoreTrans = false;
            return;
        }

        if (showUnreviewed != ShowUnreviewed)
        {
            return;
        }

        var existingIds = new HashSet<long>(Transactions.Select(x => x.Id));
        var filtered = res.Transactions.Where(x => !existingIds.Contains(x.Id));
        UnfilteredTransactionCount += filtered.Count();
        filtered = FilterTransactions(filtered);
        Transactions.AddRange(filtered);
        HasMoreTrans = res.HasMore;
        if (settingsService.Settings.SortTransactionOnLoadMore)
        {
            Transactions.Sort(TransactionsService.SortTransacactions);
        }

        LoadingMoreTrans = false;
        StateHasChanged();
    }

    private IEnumerable<TransactionDisplay> FilterTransactions(IEnumerable<TransactionDisplay> tran)
    {
        var res = tran.Where(x => !x.IsInsideGroup
            && x.TranType != TransactionType.SplitPart);

        return res;
    }

    protected override Task<bool> TransactionAdded(BaseTransactionForEdit updated)
    {
        return Task.FromResult(true);
    }

    protected override Task<bool> TransactionDeleted(BaseTransactionForEdit updated)
    {
        return Task.FromResult(true);
    }

    protected override bool ShouldAddTransactionToList(
            TransactionDisplay tran,
            BaseTransactionForEdit update)
    {
        if (ShowUnreviewed && tran.IsCleared)
        {
            return false;
        }

        return true;
    }

    // Export functionality
    private ExportModal exportModal;

    private async Task ShowExportModal()
    {
        if (exportModal != null)
        {
            await exportModal.ShowModal();
        }
    }
}
