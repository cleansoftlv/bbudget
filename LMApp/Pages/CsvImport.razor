@using LMApp.Models.CsvImport
@using LMApp.Models.Transactions
@using LMApp.Models.UI
@using Microsoft.AspNetCore.Components.Forms
@page "/import/csv"
@layout FullLayout
@inherits BasePage
@inject CsvImportService csvImportService
@inject TransactionsService transactionsService
@inject FormatService formatService

<PageTitle>CSV Import</PageTitle>

<main class="@_currentStep">
    <h1 class="d-none d-big-block">Import Transactions from CSV</h1>

    <LoadingPanel IsLoading="IsLoading" ErrorMessage="@LoadError" OnRetry="ReloadOnError">
        <LMApp.Controls.Bootstrap.StepsHeader class="mb-4"
                                              Steps="@(["Upload", "Review", "Map", "Finish"])"
                                              StepIndex="(int)_currentStep" />

        <div class="mt-2">
            @if (_currentStep == ImportStep.Upload)
            {
                <h5 class="mb-4">
                    Upload CSV File
                </h5>
                <div>

                    <div class="mb-3">
                        <InputFile OnChange="OnFileSelected"
                                   accept=".csv"
                                   class="form-control"
                                   disabled="@_isProcessing" />
                    </div>

                    <p class="text-muted mb-3">
                        Tab or comma sepparated. Supported columns: <strong>Id, Amount, Date, Payee, Notes, Currency, Account</strong>
                    </p>

                    @if (!string.IsNullOrEmpty(_uploadError))
                    {
                        <Alert Color="Color.Warning">
                            <i class="fa-solid fa-exclamation-triangle me-2"></i>
                            @_uploadError
                        </Alert>
                    }

                    @if (_isProcessing)
                    {
                        <div class="text-center">
                            <Spinner />
                            <div class="mt-2">Processing CSV file...</div>
                        </div>
                    }
                </div>
            }
            else if (_currentStep == ImportStep.Review)
            {
                <h5 class="mb-4">
                    Review & Select Transactions
                </h5>
                <div class="mb-4">
                    <Button Color="Color.Secondary" Size="Size.Small" OnClick="ResetImport">
                        <i class="fa-solid fa-arrow-left me-1"></i>
                        Back to Upload
                    </Button>
                </div>
                <div>
                    @if (_importResult != null)
                    {
                        <p class="text-muted mb-4">
                            @_allTransactions.Count transaction@(_allTransactions.Count == 1 ? "" : "s") loaded from CSV.
                            @if (_importResult.DuplicatesCount > 0)
                            {
                                <span>@_importResult.DuplicatesCount duplicate@(_importResult.DuplicatesCount == 1 ? "" : "s") ignored.</span>
                            }
                            @if (_importResult.InvalidCount > 0)
                            {
                                <span class="text-warning">@_importResult.InvalidCount invalid transaction@(_importResult.InvalidCount == 1 ? "" : "s") skipped.</span>
                            }
                            Select the transactions you want to import.
                        </p>

                        <div class="mb-4">
                            <Table TItem="CsvImportService.CsvTransactionBase"
                                   @bind-SelectedRows="_selectedTransactions"
                                   IsKeepSelectedRows="true"
                                   IsPagination="true"
                                   ShowPageInfo="true"
                                   PageItems="20"
                                   PageItemsSource="@_pageItemsSource"
                                   IsStriped="true"
                                   ClickToSelect="true"
                                   RenderModeResponsiveWidth="BreakPoint.Small"
                                   IsBordered="true"
                                   ShowRefresh="false"
                                   IsMultipleSelect="true"
                                   ShowToolbar="true"
                                   ShowDefaultButtons="false"
                                   OnQueryAsync="@OnQueryAsync">
                                <TableColumns>
                                    <TableColumn @bind-Field="@context.Date" FormatString="dd.MM.yyyy" />
                                    <TableColumn @bind-Field="@context.Account" />
                                    <TableColumn @bind-Field="@context.Amount" Align="Alignment.Right">
                                        <Template Context="item">
                                            @formatService.FormatTranAmount(item.Value * -1, item.Row.Currency)
                                        </Template>
                                    </TableColumn>
                                    <TableColumn @bind-Field="@context.Payee" TextWrap="true" />
                                    <TableColumn @bind-Field="@context.Notes" TextWrap="true" />
                                </TableColumns>
                            </Table>
                        </div>

                        <div>
                            <Button Color="Color.Primary"
                                    OnClick="ProceedToAccountMapping"
                                    IsDisabled="@(!_selectedTransactions.Any())"
                                    class="btn-lg">
                                <i class="fa-solid fa-arrow-right me-2"></i>
                                Next: Map Accounts (@_selectedTransactions.Count Transaction@((_selectedTransactions.Count != 1) ? "s" : ""))
                            </Button>
                        </div>
                    }
                </div>
            }
            else if (_currentStep == ImportStep.AccountMapping)
            {
                <h5 class="mb-4">
                    Map Accounts
                </h5>
                <div class="mb-4">
                    <Button Color="Color.Secondary" OnClick="@(() => _currentStep = ImportStep.Review)">
                        <i class="fa-solid fa-arrow-left me-1"></i>
                        Back to Review
                    </Button>
                </div>
                <div class="mb-4">
                    @if (_needsAccountMapping)
                    {
                        <Alert Color="Color.Warning" class="mb-3">
                            <i class="fa-solid fa-info-circle me-2"></i>
                            Some account names in your selected transactions don't match your existing accounts. Please map them below to proceed.
                        </Alert>

                        <div class="mb-4 csv-import-account-mapping">
                            <h6 class="mb-3">Account Mapping Required</h6>
                            @foreach (var accountName in _unmappedAccounts)
                            {
                                <div class="row mb-3 align-items-center p-3 border rounded account-mapping-row @((_accountMapping.ContainsKey(accountName) && _accountMapping[accountName].HasValue) ? "mapped" : "unmapped")">
                                    <div class="col-md-4">
                                        <BootstrapInput Value="accountName" 
                                            ShowLabel="true"
                                            DisplayText="CSV Account"
                                            Readonly=true />
                                    </div>
                                    <div class="col-md-1 text-center">
                                        <i class="fa-solid fa-arrow-right"></i>
                                    </div>
                                    <div class="col-md-4">
                                        <Select @bind-Value="_accountMapping[accountName]"
                                                TValue="long?"
                                                Items="_accountSelectItems"
                                                PlaceHolder="Select account..."
                                                ShowLabel="true"
                                                DisplayText="BBudget Account"
                                                class="@((_accountMapping.ContainsKey(accountName) && _accountMapping[accountName].HasValue) ? "border-success" : "border-warning")" />
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <Alert Color="Color.Info" class="mb-3">
                            <i class="fa-solid fa-check-circle me-2"></i>
                            All accounts in your selected transactions are already mapped to your existing accounts. You can proceed to import.
                        </Alert>
                    }
                </div>
                <div>
                    <Button Color="Color.Primary"
                            OnClick="ImportTransactions"
                            IsDisabled="@(!CanImport())"
                            class="btn-lg">
                        <i class="fa-solid fa-download me-2"></i>
                        Import @_selectedTransactions.Count Transaction@((_selectedTransactions.Count != 1) ? "s" : "")
                    </Button>
                </div>
            }
            else if (_currentStep == ImportStep.Complete)
            {
                <h5 class="mb-4">
                    Import Complete
                </h5>
                <div class="import-success">
                    @if (_importTransactionResult?.Success == true)
                    {
                        <div class="mb-4">
                            <i class="fa-solid fa-check-circle text-success" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-success mb-3">Successfully imported @_importTransactionResult.ImportedCount transactions!</h4>
                        @if (_importTransactionResult.FailedCount > 0)
                        {
                            <p class="text-warning mb-3">
                                @_importTransactionResult.FailedCount transactions failed to import.
                            </p>
                        }
                        <div class="d-flex justify-content-center gap-2">
                            <Button Color="Color.Primary" OnClick="ViewAllTransactions">
                                <i class="fa-solid fa-list me-1"></i>
                                View All Transactions
                            </Button>
                            <Button Color="Color.Secondary" OnClick="ResetImport">
                                <i class="fa-solid fa-plus me-1"></i>
                                Import More
                            </Button>
                        </div>
                    }
                    else
                    {
                        <div class="mb-4">
                            <i class="fa-solid fa-exclamation-triangle text-danger" style="font-size: 4rem;"></i>
                        </div>
                        <h4 class="text-danger mb-3">Import failed</h4>
                        <p class="text-muted mb-3">@_importTransactionResult?.ErrorMessage</p>
                        <Button Color="Color.Primary" OnClick="@(() => _currentStep = ImportStep.AccountMapping)">
                            <i class="fa-solid fa-arrow-left me-1"></i>
                            Back to Account Mapping
                        </Button>
                    }
                </div>
            }
        </div>
    </LoadingPanel>

</main>

@code {
    private enum ImportStep
    {
        Upload = 0,
        Review = 1,
        AccountMapping = 2,
        Complete = 3
    }

    private ImportStep _currentStep = ImportStep.Upload;
    private bool _isProcessing = false;
    private string _uploadError = "";

    private CsvImportService.CsvImportResult _importResult;
    private List<CsvImportService.CsvTransactionBase> _allTransactions = new();
    private List<CsvImportService.CsvTransactionBase> _selectedTransactions = new();

    private bool _needsAccountMapping = false;
    private HashSet<string> _unmappedAccounts = new();
    private Dictionary<string, long?> _accountMapping = new();
    private List<AccountOption> _availableAccounts = new();
    private List<SelectedItem> _accountSelectItems = new();

    private CsvImportService.ImportTransactionsResult _importTransactionResult;

    private static readonly int[] _pageItemsSource = new[] { 10, 20, 50 };

    public class AccountOption
    {
        public long Id { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (LoadCancelled) return;

        userService.SetActivePageState("CSV Import", false);

        // Load available accounts for mapping
        LoadAvailableAccounts();
    }


    private void LoadAvailableAccounts()
    {
        try
        {
            var accounts = userService.Accounts;
            _accountSelectItems = accounts.Select(a => new SelectedItem
            {
                Value = a.id.ToString(),
                Text = a.name
            }).ToList();

            _availableAccounts = accounts.Select(a => new AccountOption
            {
                Id = a.id,
                Name = a.name
            }).ToList();
        }
        catch (Exception ex)
        {
            LoadError = $"Failed to load accounts: {ex.Message}";
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        _isProcessing = true;
        _uploadError = "";
        StateHasChanged();

        try
        {
            var file = e.File;
            if (file == null)
            {
                _uploadError = "No file selected";
                return;
            }

            if (file.Size > 10 * 1024 * 1024) // 10MB limit
            {
                _uploadError = "File size exceeds 10MB limit";
                return;
            }

            if (!file.Name.EndsWith(".csv", StringComparison.OrdinalIgnoreCase))
            {
                _uploadError = "Please select a CSV file";
                return;
            }

            _importResult = await csvImportService.ProcessCsvFile(file);

            if (!_importResult.Success)
            {
                _uploadError = _importResult.ErrorMessage;
                return;
            }

            // Filter valid transactions and prepare for review
            _allTransactions = _importResult.Transactions
                .ToList();

            // Select all valid transactions by default
            _selectedTransactions = _allTransactions.ToList();

            // Check for account mapping needs (but don't show the step yet)
            CheckAccountMapping();

            _currentStep = ImportStep.Review;
        }
        catch (Exception ex)
        {
            _uploadError = $"Error processing file: {ex.Message}";
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private void CheckAccountMapping()
    {
        var csvAccountNames = _importResult.Transactions
            .Select(t => t.Account)
            .Distinct()
            .ToHashSet();

        var existingAccountNames = _availableAccounts
            .Select(a => a.Name)
            .ToHashSet(StringComparer.OrdinalIgnoreCase);

        _unmappedAccounts = csvAccountNames
            .Where(name => !existingAccountNames.Contains(name))
            .ToHashSet();

        _needsAccountMapping = _unmappedAccounts.Any();

        // Initialize account mapping
        _accountMapping.Clear();
        foreach (var accountName in csvAccountNames)
        {
            var matchingAccount = _availableAccounts
                .FirstOrDefault(a => string.Equals(a.Name, accountName, StringComparison.OrdinalIgnoreCase));

            _accountMapping[accountName] = matchingAccount?.Id;
        }
    }

    private void ProceedToAccountMapping()
    {
        if (!_selectedTransactions.Any()) return;

        // Re-check account mapping for selected transactions only
        var selectedAccountNames = _selectedTransactions
            .Select(t => t.Account)
            .Distinct()
            .ToHashSet();

        var existingAccountNames = _availableAccounts
            .Select(a => a.Name)
            .ToHashSet(StringComparer.OrdinalIgnoreCase);

        _unmappedAccounts = selectedAccountNames
            .Where(name => !existingAccountNames.Contains(name))
            .ToHashSet();

        _needsAccountMapping = _unmappedAccounts.Any();

        // Update account mapping for selected accounts only
        var newAccountMapping = new Dictionary<string, long?>();
        foreach (var accountName in selectedAccountNames)
        {
            // Keep existing mapping if it exists
            if (_accountMapping.ContainsKey(accountName))
            {
                newAccountMapping[accountName] = _accountMapping[accountName];
            }
            else
            {
                // Try to find a match
                var matchingAccount = _availableAccounts
                    .FirstOrDefault(a => string.Equals(a.Name, accountName, StringComparison.OrdinalIgnoreCase));

                newAccountMapping[accountName] = matchingAccount?.Id;
            }
        }
        _accountMapping = newAccountMapping;

        _currentStep = ImportStep.AccountMapping;
        StateHasChanged();
    }

    private Task<QueryData<CsvImportService.CsvTransactionBase>> OnQueryAsync(QueryPageOptions options)
    {
        var displayTransactions = _allTransactions
            .OrderBy(t => t.Account)
            .ThenBy(t => t.Date)
            .ToArray();

        var total = displayTransactions.Length;
        var items = displayTransactions
            .Skip((options.PageIndex - 1) * options.PageItems)
            .Take(options.PageItems)
            .ToArray();

        return Task.FromResult(new QueryData<CsvImportService.CsvTransactionBase>
        {
            Items = items,
            TotalCount = total,
            IsSorted = true,
            IsFiltered = false,
            IsSearch = false
        });
    }

    private void SelectAll()
    {
        _selectedTransactions = _allTransactions.ToList();
        StateHasChanged();
    }

    private void DeselectAll()
    {
        _selectedTransactions.Clear();
        StateHasChanged();
    }

    private bool CanImport()
    {
        if (!_selectedTransactions.Any()) return false;

        // Check that all accounts from selected transactions have been mapped
        var selectedAccountNames = _selectedTransactions
            .Select(t => t.Account)
            .Distinct()
            .ToHashSet();

        return selectedAccountNames.All(name =>
            _accountMapping.ContainsKey(name) && _accountMapping[name].HasValue);
    }

    private async Task ImportTransactions()
    {
        if (!CanImport()) return;

        IsLoading = true;
        StateHasChanged();

        try
        {
            // Prepare account mapping for import
            var accountMapping = new Dictionary<string, long>();
            foreach (var kvp in _accountMapping)
            {
                if (kvp.Value.HasValue)
                {
                    accountMapping[kvp.Key] = kvp.Value.Value;
                }
            }

            _importTransactionResult = await csvImportService.ImportSelectedTransactions(
                _selectedTransactions, accountMapping);

            _currentStep = ImportStep.Complete;
        }
        catch (Exception ex)
        {
            _importTransactionResult = new CsvImportService.ImportTransactionsResult
            {
                Success = false,
                ErrorMessage = $"Import error: {ex.Message}"
            };
            _currentStep = ImportStep.Complete;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void ResetImport()
    {
        _currentStep = ImportStep.Upload;
        _importResult = null;
        _allTransactions.Clear();
        _selectedTransactions.Clear();
        _uploadError = "";
        _needsAccountMapping = false;
        _unmappedAccounts.Clear();
        _accountMapping.Clear();
        _importTransactionResult = null;
        StateHasChanged();
    }

    private void ViewAllTransactions()
    {
        navigationManager.NavigateTo("/transactions");
    }

}
