@page "/settings"
@page "/settings/{ActiveTab?}"
@using LMApp.Controls.Bootstrap
@using LMApp.Models.Categories
@using LMApp.Models.Context
@using LMApp.Models.UI
@inject SettingsService settingsService
@inject ToastService toastService
@inherits BasePage
<PageTitle>@(BudgetName ?? "Loading...") - Settings</PageTitle>
@if (NoSettings)
{
    <Alert class="mb-4 mt-2" Color="Color.Info">
        <p>
            To start using BBudget, you need to configure a few settings. You can always change them later.

            <ul>
                @if (userService.CurrentAccountSettings?.TransferCategoryId == null)
                {
                    <li>Please select your account transfer category.</li>
                }
                @if (userService.CurrentAccountSettings?.AdditionalCurrencies == null || !userService.CurrentAccountSettings.AdditionalCurrencies.Any())
                {
                    <li>Please select all additional currencies you use in your account.</li>
                }
                @if (userService.CurrentAccountSettings?.CrossCurrencyTransferCategoryId == null
                            && userService.CurrentAccountSettings?.AdditionalCurrencies.Any() == true)
                {
                    <li>Optionally, specify a different category for transfers between accounts in different currencies.</li>
                }
            </ul>
        </p>
    </Alert>
}

<h1 class="mb-0">@(BudgetName ?? "Loading...")</h1>
<h2 class="text-muted mb-2">Settings</h2>
<LoadingPanel IsLoading="IsLoading" ErrorMessage="@LoadError" OnRetry="ReloadOnError">

    @* Navigation Tabs *@
    <nav class="nav nav-tabs mb-2">
        <NavLinkExt class="nav-link" href="settings" Match="Models.UI.NavLinkExtMatch.PathAll">
            Main Settings
        </NavLinkExt>
        <NavLinkExt class="nav-link" href="settings/categories" Match="Models.UI.NavLinkExtMatch.PathAll">
            Categories
        </NavLinkExt>
        <NavLinkExt class="nav-link" href="settings/budgets" Match="Models.UI.NavLinkExtMatch.PathAll">
            Budgets
        </NavLinkExt>
        <NavLinkExt class="nav-link" href="settings/accounts" Match="Models.UI.NavLinkExtMatch.PathAll">
            Accounts
        </NavLinkExt>
    </nav>

    @if (IsMainSettingsTab)
    {
        <div class="mb-4">
            <label for="PrimaryCurrency">Primary Currency</label>
            <BootstrapInput Id="PrimaryCurrency" Value="@settingsService.PrimaryCurrency" IsDisabled="true" />
            <Alert class="mt-1" Color="Color.Secondary" Icon="fa-solid fa-info-circle">The primary currency can be configured in Lunch Money settings.</Alert>
        </div>
        <div class="mb-4">
            <label for="AdditionalCurrencies">Additional Currencies</label>
            <MultiSelect id="AdditionalCurrencies"
                         Items="AllCurrencies"
                         ShowSearch="true"
                         OnValueChanged="x => Save()"
                         @bind-Value="SelectedCurrencies" />
            <Alert class="mt-1" Color="Color.Secondary" Icon="fa-solid fa-info-circle">The LM API doesn't return the additional currencies set in your account. Please select all additional currencies you use in your account.</Alert>
        </div>
        <div class="mb-4">
            <SearchEntitySelect id="TransferCategory"
                                DisplayText="Account transfer category"
                                Items="Categories"
                                OnValueChanged="x=> Save()"
                                @bind-Value="TransferCategoryId" />
            <Alert class="mt-1" Color="Color.Secondary" Icon="fa-solid fa-info-circle">BBudget uses a single category from your LM account for transfers between accounts. Please select your account transfer category.</Alert>
        </div>
        <div class="mb-4">
            <SearchEntitySelect id="CrossCurrencyTransferCategory"
                                DisplayText="Cross-currency transfer category (optional)"
                                Items="Categories"
                                OnValueChanged="x=> Save()"
                                @bind-Value="CrossCurrencyTransferCategoryId" />
            <Alert class="mt-1" Color="Color.Secondary" Icon="fa-solid fa-info-circle">
                Optionally, specify a different category for transfers between accounts in different currencies.
                If not set, the default transfer category will be used. You can use a separate category to track expenses related to currency conversion.
            </Alert>
        </div>
        <div class="mb-4">
            <Toggle ShowLabel="true" DisplayText="Sort transaction list after loading the next transaction page" OnText="Sort after load" OffText="Don't sort" Id="SortOnLoadMore" @bind-Value="SortTransactionsOnLoadMore" OnValueChanged="x => Save()" />
            <Alert class="mt-1" Color="Color.Secondary" Icon="fa-solid fa-info-circle">The LM API doesn't return transactions sorted by date. When you scroll to the end of the transaction list, more transactions will be loaded. By default, loaded transactions will be added to the end of the list. If you turn on this setting, transactions will be added and the entire list will be sorted.</Alert>
        </div>
    }
    else if (IsCategoriesTab)
    {
        <CategoriesEditor />
    }
    else if (IsBudgetsTab)
    {
        <Alert class="mb-4" Color="Color.Info">
            <p class="mb-2">
                Budgets can be configured in the Lunch Money settings.
            </p>
            <p>
                <a href="https://my.lunchmoney.app/budget" target="_blank" class="btn btn-primary">
                    Open Lunch Money Settings
                </a>
            </p>
            <p class="mb-2">
                After updating settings in Lunch Money (categories, accounts, or budgets), you need to reload BBudget for the changes to take effect.
            </p>
            <button class="btn btn-warning" @onclick="ReloadBBudget">
                <i class="fa-solid fa-refresh"></i> Reload BBudget
            </button>
        </Alert>
    }
    else if (IsAccountsTab)
    {
        <Alert class="mb-4" Color="Color.Info">
            <p class="mb-2">
                You can add or update accounts on the Accounts page. Scroll down in the accounts list and click "Edit accounts".
            </p>
            <a class="btn btn-primary" href="accounts">Open</a>
        </Alert>
    }
</LoadingPanel>


@code {

    [Parameter]
    public string ActiveTab { get; set; }

    [SupplyParameterFromQuery(Name = "noSettings")]
    public bool NoSettings { get; set; }

    private bool IsMainSettingsTab => string.IsNullOrEmpty(ActiveTab) || ActiveTab.Equals("main", StringComparison.OrdinalIgnoreCase);
    private bool IsCategoriesTab => ActiveTab?.Equals("categories", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsAccountsTab => ActiveTab?.Equals("accounts", StringComparison.OrdinalIgnoreCase) ?? false;
    private bool IsBudgetsTab => ActiveTab?.Equals("budgets", StringComparison.OrdinalIgnoreCase) ?? false;

    private bool IsSaving;
    public string SaveError;
    public string BudgetName { get; set; }
    private IEnumerable<SelectedItem> AllCurrencies;
    private IEnumerable<string> SelectedCurrencies;
    private IEnumerable<SelectedItem> Categories;
    public override bool SettingsRequired => false;
    public bool SortTransactionsOnLoadMore { get; set; }

    private long? TransferCategoryId;
    private long? CrossCurrencyTransferCategoryId;

    override protected async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (LoadCancelled
            || userService.CurrentAccount == null
            || userService.Categories == null)
            return;

        AllCurrencies = settingsService.AllSupportedCurrencies
            .Select(x => new SelectedItem
            {
                IsDisabled = x == settingsService.PrimaryCurrency,
                Value = x,
                Text = x
            }).ToList();


        Categories = settingsService.GetCachedCategories().Select(x => new SelectedItem
        {
            Active = true,
            Value = x.id.ToString(),
            Text = x.name
        }).ToList();

        SelectedCurrencies = settingsService.AdditionalCurrencies ?? Array.Empty<string>();
        TransferCategoryId = settingsService.Settings.TransferCategoryId;
        CrossCurrencyTransferCategoryId = settingsService.Settings.CrossCurrencyTransferCategoryId;
        SortTransactionsOnLoadMore = settingsService.Settings.SortTransactionOnLoadMore;
        BudgetName = userService.CurrentAccount.BudgetName;
    }

    protected override Task OnParametersSetAsync()
    {
        if (!IsMainSettingsTab
            && (NoSettings ||
                (userService.CurrentAccountSettings != null &&
                    userService.CurrentAccountSettings.TransferCategoryId == null)))
        {
            navigationManager.NavigateTo("/settings?noSettings=true");
        }

        return base.OnParametersSetAsync();
    }

    private async Task Save()
    {
        IsSaving = true;
        SaveError = null;
        var settings = settingsService.Settings;
        settings.AdditionalCurrencies = (SelectedCurrencies ?? Array.Empty<string>())
            .Where(x => !string.IsNullOrEmpty(x) && !string.Equals(x, settingsService.PrimaryCurrency, StringComparison.InvariantCultureIgnoreCase)).ToArray();
        settings.TransferCategoryId = TransferCategoryId;
        settings.CrossCurrencyTransferCategoryId = CrossCurrencyTransferCategoryId;
        settings.SortTransactionOnLoadMore = SortTransactionsOnLoadMore;

        try
        {
            await settingsService.SaveCurrentSettings();
        }
        catch (HttpRequestException ex)
        {
            ex.LogIfRequired(log);
            SaveError = ex.GetDescriptionForUser();
        }
        IsSaving = false;

        if (string.IsNullOrEmpty(SaveError))
        {
            await toastService.Show(new ToastOption
            {
                Content = "Settings saved successfully",
                Delay = 2000,
                PreventDuplicates = true,
                Category = ToastCategory.Success,
                ShowHeader = false,
                IsAutoHide = true,
                ShowClose = false
            });
        }
        StateHasChanged();
    }

    private void ReloadBBudget()
    {
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }
}
