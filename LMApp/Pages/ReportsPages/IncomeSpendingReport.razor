@page "/reports/income-spending"
@using LMApp.Models.Context
@using LMApp.Models.Reports
@using LMApp.Models.UI
@using LMApp.Models.UI.GoogleDrive
@layout MainLayout
@inherits BasePage
@inject ReportsService reportsService
@inject FormatService formatService
@inject SettingsService settingsService
@inject GoogleDriveExporter googleDriveExporter


<PageTitle>Income vs Spending Report</PageTitle>

<h1 class="d-none d-big-block">Income vs Spending Report</h1>
<LoadingPanel IsLoading="IsLoading" ErrorMessage="@LoadError" OnRetry="ReloadOnError">
    <div class="container-fluid g-0">
        <div class="row">
            <div class="col-12">
                <div class="mb-4">
                    <p class="text-muted">
                        This report shows your income versus spending for the specified number of months.
                        All amounts are displayed in your base currency.
                        The report includes all transactions marked as income and expenses, except from categories with "Exclude from totals".
                    </p>
                </div>

                @if (!IsGenerating && ReportData == null)
                {
                    <div class="row pb-2">
                        <div class="col-md-6">
                            <BootstrapInputNumber @bind-Value="NumberOfMonths"
                                                  DisplayText="Number of Months"
                                                  ShowLabel="true"
                                                  Id="monthsInput"
                                                  Min="1"
                                                  Max="24"
                                                  PlaceHolder="Enter number of months" />
                            @if (!string.IsNullOrEmpty(ValidationError))
                            {
                                <div class="text-danger small mt-1">@ValidationError</div>
                            }
                            <div class="form-text">Enter a number between 1 and 24 months</div>
                        </div>
                    </div>
                }

                @if (IsGenerating)
                {
                    <div class="text-center mb-4">
                        <div class="spinner-border text-primary mb-3" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="fw-bold mb-2">Generating Report...</div>
                        <div class="text-muted">@ProgressMessage</div>
                    </div>
                }
                else if (ReportData != null)
                {
                    <div class="alert alert-success mb-4">
                        <i class="fa-solid fa-check-circle me-2"></i>
                        Report generated successfully! The report includes transaction data from
                        @formatService.FormatMonth(ReportData.FromMonth) to @formatService.FormatMonth(ReportData.ToMonth)
                        (@NumberOfMonths month@(NumberOfMonths == 1 ? "" : "s")).
                    </div>

                    <div class="table-responsive mb-4">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th class="text-end">Income</th>
                                    <th class="text-end">Expenses</th>
                                    <th class="text-end">Balance</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var monthData in ReportData.MonthlyData.OrderBy(m => m.Month))
                                {
                                    <tr>
                                        <td>@formatService.FormatMonth(monthData.Month)</td>
                                        <td class="text-end">@formatService.FormatBalance(monthData.Income, ReportData.Currency, isLiability: false)</td>
                                        <td class="text-end">@formatService.FormatBalance(monthData.Expenses, ReportData.Currency)</td>
                                        <td class="text-end">
                                            @formatService.FormatBalance(monthData.Balance, ReportData.Currency, isLiability: monthData.Balance >= 0)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr class="fw-bold">
                                    <td>Total</td>
                                    <td class="text-end">@formatService.FormatBalance(ReportData.TotalIncome, ReportData.Currency, isLiability: false)</td>
                                    <td class="text-end">@formatService.FormatBalance(ReportData.TotalExpenses, ReportData.Currency, isLiability: false)</td>
                                    <td class="text-end">
                                        @formatService.FormatBalance(ReportData.TotalBalance, ReportData.Currency, isLiability: ReportData.TotalBalance >= 0)
                                    </td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>

                    <div>
                        <Button Color="Color.Success"
                                Size="Size.Large"
                                Icon="fab fa-google-drive"
                                OnClick="ExportToGoogleDrive"
                                IsDisabled="IsExportingToGoogleDrive"
                                class="btn-lg me-2 mb-4">
                            @if (IsExportingToGoogleDrive)
                            {
                                <Spinner Size="Size.Small" class="mx-2" />
                                <span>Exporting...</span>
                            }
                            else
                            {
                                <span>Export to Google Drive</span>
                            }
                        </Button>
                        <Button Color="Color.Primary"
                                Size="Size.Large"
                                Icon="fa-solid fa-download"
                                OnClick="DownloadReport"
                                class="btn-lg me-2 mb-4">
                            Download CSV
                        </Button>
                        <Button Color="Color.Secondary"
                                Size="Size.Large"
                                Icon="fa-solid fa-arrow-left"
                                OnClick="ResetReport"
                                class="btn-lg mb-4">
                            Generate New Report
                        </Button>
                    </div>
                }
                else
                {
                    <div class="mt-4">
                        <Button Color="Color.Primary"
                                Size="Size.Large"
                                Icon="fa-solid fa-chart-line"
                                OnClick="GenerateReport"
                                IsDisabled="IsGenerating"
                                class="btn-lg">
                            Generate Report
                        </Button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(GenerateError))
                {
                    <div class="alert alert-danger mt-4">
                        <i class="fa-solid fa-exclamation-triangle me-2"></i>
                        @GenerateError
                    </div>
                }

                @if (!string.IsNullOrEmpty(ExportError))
                {
                    <div class="alert alert-danger mt-4">
                        <i class="fa-solid fa-exclamation-triangle me-2"></i>
                        @ExportError
                    </div>
                }

                <div class="mt-4">
                    <a href="javascript:" @onclick="BackToReports">
                        <i class="fa-solid fa-arrow-left"></i> Back to reports
                    </a>
                </div>
            </div>
        </div>
    </div>
</LoadingPanel>


@code {
    private IncomeSpendingReportData ReportData;
    private bool IsGenerating = false;
    private bool IsExportingToGoogleDrive = false;
    private string ProgressMessage = "";
    private string GenerateError = "";
    private string ExportError = "";
    private string ValidationError = "";
    private int NumberOfMonths = 3;

    public async Task BackToReports()
    {
        await ResponsiveNavigate("/reports", NavDirection.Back);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (LoadCancelled)
            return;

        userService.SetActivePageState("Income vs Spending Report", true);
        userService.SetActivePageBackHandler(EventCallback.Factory.Create(this, BackToReports));
    }

    private bool ValidateInput()
    {
        ValidationError = "";

        if (NumberOfMonths < 1)
        {
            ValidationError = "Number of months must be at least 1";
            return false;
        }

        if (NumberOfMonths > 24)
        {
            ValidationError = "Number of months cannot exceed 24";
            return false;
        }

        return true;
    }

    private async Task GenerateReport()
    {
        if (!ValidateInput())
        {
            StateHasChanged();
            return;
        }

        IsGenerating = true;
        GenerateError = "";
        ValidationError = "";
        ProgressMessage = "Starting report generation...";
        ReportData = null;
        StateHasChanged();

        try
        {
            ReportData = await reportsService.GenerateIncomeSpendingReportAsync(NumberOfMonths, UpdateProgress);
            ProgressMessage = "Report completed!";
        }
        catch (Exception ex)
        {
            GenerateError = $"Failed to generate report: {ex.Message}";
        }
        finally
        {
            IsGenerating = false;
            StateHasChanged();
        }
    }

    private void UpdateProgress(string message)
    {
        ProgressMessage = message;
        InvokeAsync(StateHasChanged);
    }

    private void ResetReport()
    {
        ReportData = null;
        GenerateError = "";
        ExportError = "";
        ValidationError = "";
        ProgressMessage = "";
        StateHasChanged();
    }

    private async Task DownloadReport()
    {
        if (ReportData == null)
            return;

        try
        {
            var csvContent = reportsService.GenerateIncomeSpendingReportCsv(ReportData);
            var fileName = $"income-spending-report-{NumberOfMonths}months-{DateTime.Now:yyyy-MM-dd}.csv";

            await utils.DownloadFile(fileName, csvContent, "text/csv");
        }
        catch (Exception ex)
        {
            GenerateError = $"Failed to download report: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task ExportToGoogleDrive()
    {
        if (ReportData == null)
            return;

        IsExportingToGoogleDrive = true;
        ExportError = "";
        StateHasChanged();

        try
        {
            var csvContent = reportsService.GenerateIncomeSpendingReportCsv(ReportData);
            var fileName = $"income-spending-report-{NumberOfMonths}months-{DateTime.Now:yyyy-MM-dd}";

            var result = await googleDriveExporter.ExportRawCsvToGoogleDrive(csvContent, fileName);

            if (result.Success)
            {
                await ShowExportSuccessModal(result.Message, result.WebViewLink);
            }
            else
            {
                ExportError = $"Failed to export to Google Drive: {result.Message}";
            }
        }
        catch (Exception ex)
        {
            ExportError = $"Failed to export to Google Drive: {ex.Message}";
        }
        finally
        {
            IsExportingToGoogleDrive = false;
            StateHasChanged();
        }
    }

    private async Task ShowExportSuccessModal(string message, string googleDriveLink)
    {
        await ModalContainer.Modal.Show(new Models.UI.InfoModalVM
        {
            Title = "Export Successful",
            Message = new MarkupString($"<div class='text-center'><i class='fa-solid fa-check-circle text-success fs-1 mb-3'></i><p>{message}</p></div>"),
            ModalSize = Size.Medium,
            AdditionalButtonText = "Open in Google Sheets",
            AdditionalButtonColor = Color.Success,
            AdditionalButtonCallback = async () =>
            {
                await ModalContainer.Modal.Hide();
                await utils.OpenNewTab(googleDriveLink);
            }
        });
    }
}