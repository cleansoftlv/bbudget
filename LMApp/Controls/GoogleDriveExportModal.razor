@using System.Text.Json
@using LMApp.Models.Transactions
@using LMApp.Models.UI.GoogleDrive
@inject GoogleDriveExporter googleDriveExporter

<Modal @ref="_modal" IsKeyboard="true" IsFade="false">
    <ModalDialog Title="Export to Google Drive" ShowCloseButton="true" Size="Size.Medium">
        <BodyTemplate>
            @if (IsExporting)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">@ExportStatus</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @ErrorMessage
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary" @onclick="RetryExport">
                        <i class="fas fa-redo me-2"></i>
                        Retry
                    </button>
                </div>
            }
            else if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @SuccessMessage
                </div>
                @if (!string.IsNullOrEmpty(WebViewLink))
                {
                    <div class="text-center">
                        <a href="@WebViewLink" target="_blank" class="btn btn-success">
                            <i class="fas fa-external-link-alt me-2"></i>
                            Open Google Sheet
                        </a>
                    </div>
                }
            }
            else
            {
                <div class="mb-3">
                    <label for="fileNameInput" class="form-label">File Name</label>
                    <input type="text" class="form-control" id="fileNameInput" @bind="FileName"
                           placeholder="BBudget_Transactions_@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <p class="text-muted">
                    <i class="fas fa-info-circle me-2"></i>
                    This will export @TransactionCount transaction(s) to a new Google Sheet.
                    You'll be asked to sign in to Google and grant permission to create files in your Google Drive.
                </p>
                <div class="text-center">
                    <button type="button" class="btn btn-success" @onclick="StartExport">
                        <i class="fab fa-google-drive me-2"></i>
                        Export to Google Drive
                    </button>
                </div>
            }
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {







    private Modal _modal;

    [Parameter] 
    public List<TransactionDisplay> Transactions { get; set; }

    private string FileName { get; set; } = string.Empty;
    private bool IsExporting { get; set; }
    private string ExportStatus { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;
    private string WebViewLink { get; set; } = string.Empty;

    private int TransactionCount => Transactions?.Count ?? 0;

    protected override void OnParametersSet()
    {
        // Reset state when modal is shown with new data
        ResetState();
        FileName = $"BBudget_Transactions_{DateTime.Now:yyyy-MM-dd}";
    }

    private void ResetState()
    {
        IsExporting = false;
        ExportStatus = string.Empty;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        WebViewLink = string.Empty;
    }

    private async Task StartExport()
    {
        await ExportToGoogleDrive();
    }

    private async Task RetryExport()
    {
        ResetState();
        await ExportToGoogleDrive();
    }

    private async Task ExportToGoogleDrive()
    {
        try
        {
            IsExporting = true;
            ExportStatus = "Preparing export...";
            StateHasChanged();

            if (Transactions == null || Transactions.Count == 0)
            {
                throw new Exception("No transactions to export");
            }

            if (string.IsNullOrWhiteSpace(FileName))
            {
                FileName = $"BBudget_Transactions_{DateTime.Now:yyyy-MM-dd}";
            }

            ExportStatus = "Authenticating with Google...";
            StateHasChanged();

            // Call JavaScript function to handle the export directly to Google Drive
            var result = await googleDriveExporter.ExportToGoogleDrive(
                new Models.UI.GoogleDrive.Dto.ExportCsvRequest
                {
                    Transactions = googleDriveExporter.Convert(Transactions).ToArray(),
                    FileName = FileName
                });

            if (result.Success)
            {
                SuccessMessage = "Successfully exported to Google Sheets!";
                WebViewLink = result.WebViewLink;
            }
            else
            {
                if (!string.IsNullOrEmpty(result.Message))
                {
                    throw new Exception(result.Message);
                }
                else
                {
                    throw new Exception("Export failed with unknown error");
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsExporting = false;
            StateHasChanged();
        }
    }

    public async Task ShowModal()
    {
        ResetState();
        await _modal.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        await googleDriveExporter.EnsureInit();
        await base.OnInitializedAsync();
    }
}
