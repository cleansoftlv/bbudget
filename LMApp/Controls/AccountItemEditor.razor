@using LMApp.Models.Account

<div class="account-row @GetCssClasses() mb-3 p-3 border rounded @(Account.AccountType == AccountType.Default ? "editable" : "readonly") @(Account.AccountType == AccountType.Default && !IsEditDisabled && !IsEditing ? "account-row-clickable" : "") @(IsEditDisabled && Account.AccountType == AccountType.Default ? "disabled" : "")"
     @onclick="HandleRowClick"
     style="cursor: @GetCursorStyle()">
    
    @if (IsEditing)
    {
        <AccountEditForm Account="@EditingAccount"
                        AccountTypes="@AccountTypes"
                        CurrencyItems="@CurrencyItems"
                        OnCancel="OnCancel"
                        OnSave="OnSave"
                        OnDelete="OnDelete"
                        IsSaving="@IsSaving"
                        SaveErrorMessage="@SaveErrorMessage" />
    }
    else
    {
        <AccountDisplayItem Account="@Account"
                           OnEdit="OnEdit"
                           IsEditDisabled="@IsEditDisabled" />
    }
</div>

@code {
    [Parameter, EditorRequired]
    public AccountDisplay Account { get; set; } = default!;

    [Parameter]
    public AccountDisplayForEdit EditingAccount { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public IEnumerable<SelectedItem> AccountTypes { get; set; }

    [Parameter]
    public IEnumerable<SelectedItem> CurrencyItems { get; set; }

    [Parameter]
    public EventCallback OnEdit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback<AccountDisplayForEdit> OnDelete { get; set; }

    [Parameter]
    public bool IsEditDisabled { get; set; }

    [Parameter]
    public bool IsSaving { get; set; }

    [Parameter]
    public string SaveErrorMessage { get; set; }

    private string GetCssClasses()
    {
        var classes = new List<string> { Account.AccountType.ToString().ToLower() };
        
        if (IsEditing)
        {
            classes.Add("editing");
        }
        
        return string.Join(" ", classes);
    }

    private string GetCursorStyle()
    {
        if (Account.AccountType != AccountType.Default || IsEditing)
            return "default";
            
        return IsEditDisabled ? "not-allowed" : "pointer";
    }

    private void HandleRowClick()
    {
        if (Account.AccountType != AccountType.Default || IsEditDisabled || IsEditing)
            return;

        OnEdit.InvokeAsync();
    }
}
