@using System.IO
@using System.Text
@using System.Text.Json
@using LMApp.Models.Reports
@using LMApp.Models.Transactions
@using LMApp.Models.UI
@using LMApp.Models.UI.GoogleDrive
@using LMApp.Models.UI.Csv
@inject GoogleDriveExporter googleDriveExporter
@inject CsvExporter csvExporter
@inject Utils utils
@inject FormatService formatService

<Modal @ref="_modal" IsKeyboard="true" IsFade="false">
    <ModalDialog Title="Export Transactions" ShowCloseButton="true" Size="Size.Medium">
        <BodyTemplate>
            @if (IsExporting)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">@ExportStatus</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @ErrorMessage
                </div>
                <div class="text-center">
                    <button type="button" class="btn btn-primary" @onclick="RetryExport">
                        <i class="fas fa-redo me-2"></i>
                        Retry
                    </button>
                </div>
            }
            else if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <div class="alert alert-success" role="alert">
                    <i class="fas fa-check-circle me-2"></i>
                    @SuccessMessage
                </div>
                @if (!string.IsNullOrEmpty(WebViewLink))
                {
                    <div class="text-center">
                        <a href="@WebViewLink" target="_blank" class="btn btn-success">
                            <i class="fas fa-external-link-alt me-2"></i>
                            Open Google Sheet
                        </a>
                    </div>
                }
            }
            else
            {
                <p class="text-muted">
                    This will export @TransactionCount transaction(s). Transactions are loaded till approximately @formatService.FormatDate(EarliestDate).
                    <LoadingPanel IsLoading="IsLoadingMore" ErrorMessage="@LoadMoreErrorMessage" OnRetry="LoadMore">
                        @if (HasMoreTransactions)
                        {
                            <div class="text-center"><a href="javascript:" @onclick="LoadMore">Load more</a></div>
                        }
                    </LoadingPanel>
                </p>
                <p class="text-muted">
                    Choose your preferred export format:
                </p>

                <div class="d-flex justify-content-center gap-3 my-4">
                    <button type="button" class="btn btn-success px-4" @onclick="StartGoogleDriveExport">
                        <i class="fab fa-google-drive me-2"></i>
                        Export to Google Drive
                    </button>
                    <button type="button" class="btn btn-primary px-4" @onclick="StartCsvExport">
                        <i class="fas fa-download me-2"></i>
                        Download CSV
                    </button>
                </div>
            }
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    private Modal _modal;

    [Parameter]
    public List<TransactionDisplay> Transactions { get; set; }

    [Parameter]
    public EventCallback OnLoadMore { get; set; }

    [Parameter]
    public bool HasMoreTransactions { get; set; }

    [Parameter]
    public bool IsLoadingMore { get; set; }

    [Parameter]
    public string LoadMoreErrorMessage { get; set; }

    private async Task LoadMore()
    {
        await OnLoadMore.InvokeAsync();
    }

    private string FileName { get; set; } = string.Empty;
    private bool IsExporting { get; set; }
    private string ExportStatus { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;
    private string SuccessMessage { get; set; } = string.Empty;
    private string WebViewLink { get; set; } = string.Empty;
    private string LastExportType { get; set; } = string.Empty;

    private int TransactionCount => Transactions?.Count ?? 0;
    private DateTime EarliestDate => Transactions?.Select(x => x.Date).Min() ?? DateTime.MinValue;

    protected override void OnParametersSet()
    {
        // Reset state when modal is shown with new data
        ResetState();
        FileName = $"BBudget_Transactions_{DateTime.Now:yyyy-MM-dd}";
    }

    private void ResetState()
    {
        IsExporting = false;
        ExportStatus = string.Empty;
        ErrorMessage = string.Empty;
        SuccessMessage = string.Empty;
        WebViewLink = string.Empty;
        LastExportType = string.Empty;
    }

    private async Task StartGoogleDriveExport()
    {
        LastExportType = "Google Drive";
        await ExportToGoogleDrive();
    }

    private async Task StartCsvExport()
    {
        LastExportType = "CSV";
        await ExportToCsv();
    }

    private async Task RetryExport()
    {
        ResetState();
        if (LastExportType == "Google Drive")
        {
            await ExportToGoogleDrive();
        }
        else if (LastExportType == "CSV")
        {
            await ExportToCsv();
        }
    }

    private async Task ExportToGoogleDrive()
    {
        try
        {
            IsExporting = true;
            ExportStatus = "Preparing export...";
            StateHasChanged();

            if (Transactions == null || Transactions.Count == 0)
            {
                throw new Exception("No transactions to export");
            }

            if (string.IsNullOrWhiteSpace(FileName))
            {
                FileName = $"BBudget_Transactions_{DateTime.Now:yyyy-MM-dd}";
            }

            ExportStatus = "Authenticating with Google...";
            StateHasChanged();

            // Call JavaScript function to handle the export directly to Google Drive
            var result = await googleDriveExporter.ExportToGoogleDrive(
                new ExportCsvRequest
                {
                    Transactions = googleDriveExporter.Convert(Transactions).ToArray(),
                    FileName = FileName
                });

            if (result.Success)
            {
                SuccessMessage = "Successfully exported to Google Sheets!";
                WebViewLink = result.WebViewLink;
            }
            else
            {
                if (!string.IsNullOrEmpty(result.Message))
                {
                    throw new Exception(result.Message);
                }
                else
                {
                    throw new Exception("Export failed with unknown error");
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsExporting = false;
            StateHasChanged();
        }
    }

    private async Task ExportToCsv()
    {
        try
        {
            IsExporting = true;
            ExportStatus = "Generating CSV file...";
            StateHasChanged();

            if (Transactions == null || Transactions.Count == 0)
            {
                throw new Exception("No transactions to export");
            }

            if (string.IsNullOrWhiteSpace(FileName))
            {
                FileName = $"BBudget_Transactions_{DateTime.Now:yyyy-MM-dd}";
            }

            ExportStatus = "Downloading file...";
            StateHasChanged();

            // Use the CSV exporter service
            await csvExporter.ExportToCsvAsync(Transactions, FileName);

            SuccessMessage = "CSV file downloaded successfully!";
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsExporting = false;
            StateHasChanged();
        }
    }

    public async Task ShowModal()
    {
        ResetState();
        await _modal.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        await googleDriveExporter.EnsureInit();
        await base.OnInitializedAsync();
    }
}
