@using LMApp.Models.Context
@using LMApp.Models.UI
@using System.Text
@inject FormatService formatService
@inject Utils utils
@inject SettingsService settingsService
<div @ref="containerRef" @onkeydown="HandleKeyDown" @onkeydown:preventDefault="preventKeyDownDefault" tabindex="0">
    @foreach (var item in Categories.Select((category, index) => (category: category, index: index)))
    {
        var currentIndex = Array.IndexOf(Categories, item.category);
        <div class="@GetRowClass(item.category, item.index)" data-index="@item.index">
            <a href="javascript:" class="budget-category-row-inner" @onclick="e => OnClick(item.category)" role="button">
                <div class="container p-0">
                    <div class="row g-0">
                        <div class="col-8 col-sm-8 mb-2">
                            <h5>
                                @item.category.Name
                            </h5>
                        </div>
                        <div class="col-4 col-sm-4 text-end" title="@(ShowSpent ? "Spent" : "Left to spend")">
                            @GetLeftOrSpent(item.category)
                            @if (ShowSpent && item.category.CategoryType != Models.Categories.BudgetCategoryType.Income)
                            {
                                <i class="spent-icon fa-solid fa-circle-down text-muted"></i>
                            }
                        </div>
                    </div>
                    <div class="row g-0">
                        <div class="col-8 col-sm-8">
                            @if (item.category.BudgetedAmountPrimary != 0)
                            {
                                <div class="inline-progress-bar">
                                    <BootstrapBlazor.Components.Progress Value="item.category.ProgressPercent < 0 ? item.category.OverspentPercent : item.category.ProgressPercent"
                                                                         Color="item.category.ProgressPercent < 0? Color.Danger: Color.Success"
                                                                         Height="10"
                                                                         class="@(item.category.ProgressPercent < 0 ? "flip-bar" : null)"
                                                                         title="@($"Left: {(item.category.ProgressPercent < 0 ? item.category.OverspentPercent : item.category.ProgressPercent)}%, {(item.category.CategoryType == Models.Categories.BudgetCategoryType.Income ? "Left to earn" : "Spent")}:  {GetTooltipAmount(item.category)}")"
                                                                         IsShowValue="false" />
                                </div>
                            }
                            else
                            {
                                // @:Budget not set
                            }
                        </div>
                        <div class="col-4 col-sm-4 text-end text-secondary align-text-top" title="Budgeted amount">@GetBudgetedAmount(item.category)</div>
                    </div>
                </div>
            </a>
        </div>
    }
    <div class="p-4 d-flex justify-content-center gap-2">
        @if (BudgetHasMultipleCurrencies)
        {
            <Toggle @bind-Value="ShowMultipleCurrencies"
                    OnValueChanged="OnSettingsToggle" 
                    OnText="Multiple" 
                    OffText="@formatService.CurrencyToSymbol(settingsService.PrimaryCurrency)" 
                    Color="Color.Secondary" />
        }
        <Toggle 
            @bind-Value="ShowSpent" 
            OnValueChanged="OnSettingsToggle" 
            OnText="Amount spent"
            OffText="Amount left"
            Color="Color.Secondary" />
    </div>
</div>
@code {
    private ElementReference containerRef;
    private int selectedIndex = -1;
    private bool ShowSpent;
    private bool ShowMultipleCurrencies;
    private bool BudgetHasMultipleCurrencies;

    private MarkupString GetBudgetedAmount(BudgetCategoryDisplay category)
    {
        if (ShowMultipleCurrencies)
        {
            return formatService.FormatBalance(category.BudgetedAmount,
                category.Currency);
        }
        else
        {
            return formatService.FormatBalance(category.BudgetedAmountPrimary,
                category.PrimaryCurrency);
        }
    }

    private MarkupString GetLeftOrSpent(BudgetCategoryDisplay category)
    {
        if (ShowMultipleCurrencies)
        {
            return formatService.FormatBalance(ShowSpent
                ? category.ActualAmount :
                category.ProgressAmount,
                category.Currency,
                isAprox: !category.BudgetedInPrimary);
        }
        else
        {
            return formatService.FormatBalance(ShowSpent
                ? category.ActualAmountPrimary :
                category.ProgressAmountPrimary,
                category.PrimaryCurrency);
        }
    }

    private string GetTooltipAmount(BudgetCategoryDisplay category)
    {
        if (ShowMultipleCurrencies)
        {
            return formatService.FormatBalanceNoHtml(
                category.CategoryType == Models.Categories.BudgetCategoryType.Income
                ? category.BudgetedAmount - category.ProgressAmount
                : category.ActualAmount,
                category.Currency,
            isAprox: !category.BudgetedInPrimary);
        }
        else
        {
            return formatService.FormatBalanceNoHtml(
                category.CategoryType == Models.Categories.BudgetCategoryType.Income
                ? category.BudgetedAmountPrimary - category.ProgressAmountPrimary
                : category.ActualAmountPrimary,
                category.PrimaryCurrency);
        }
    }

    private string GetRowClass(BudgetCategoryDisplay category, int index)
    {
        var sb = new StringBuilder("budget-category-row ");
        sb.Append(category.CategoryType.ToString().ToLower());
        if (ActiveCategoryId == category.CategoryId)
        {
            sb.Append(" active");
        }
        if (selectedIndex == index)
        {
            sb.Append(" keyboard-selected");
        }
        return sb.ToString();
    }

    private async Task OnSettingsToggle()
    {
        var settings = await settingsService.GetLocalSettings();
        settings.ShowAmountSpentInBudget = ShowSpent;
        settings.ShowMultipleCurrenciesInBudget = ShowMultipleCurrencies;
        await settingsService.SaveLocalSettings(settings);
    }

    [Parameter]
    public BudgetCategoryDisplay[] Categories { get; set; }

    [Parameter]
    public long? ActiveCategoryId { get; set; }

    [Parameter]
    public EventCallback<BudgetCategoryDisplay> CategorySelected { get; set; }

    [Parameter]
    public EventCallback OnNavidateRight { get; set; }

    private async Task OnClick(BudgetCategoryDisplay category)
    {
        await CategorySelected.InvokeAsync(category);
    }

    private bool preventKeyDownDefault;
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        preventKeyDownDefault = false;
        if (Categories == null || Categories.Length == 0)
            return;

        switch (e.Key)
        {
            case "ArrowDown":
                if (selectedIndex < Categories.Length - 1)
                {
                    preventKeyDownDefault = true;
                    selectedIndex++;
                    StateHasChanged();
                    await ScrollToSelectedItem();
                }
                break;
            case "ArrowUp":
                if (selectedIndex > 0)
                {
                    preventKeyDownDefault = true;
                    selectedIndex--;
                    StateHasChanged();
                    await ScrollToSelectedItem();
                }
                else if (selectedIndex == -1 && Categories.Length > 0)
                {
                    preventKeyDownDefault = true;
                    selectedIndex = 0;
                    StateHasChanged();
                    await ScrollToSelectedItem();
                }
                break;
            case "ArrowRight":
                await OnNavidateRight.InvokeAsync();
                break;
            case "Enter":
                if (selectedIndex >= 0 && selectedIndex < Categories.Length)
                {
                    preventKeyDownDefault = true;
                    await OnClick(Categories[selectedIndex]);
                }
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var settings = await settingsService.GetLocalSettings();
        ShowSpent = settings.ShowAmountSpentInBudget;
        ShowMultipleCurrencies = settings.ShowMultipleCurrenciesInBudget;
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        // Find the index of the active category
        if (ActiveCategoryId.HasValue && Categories != null && selectedIndex < 0)
        {
            var activeIndex = Array.FindIndex(Categories, c => c.CategoryId == ActiveCategoryId);
            if (activeIndex >= 0)
            {
                selectedIndex = activeIndex;
            }
        }

        BudgetHasMultipleCurrencies = Categories?.Any(c => c.BudgetedInPrimary == false) ?? false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await TryFocus();
        }
    }

    private async Task ScrollToSelectedItem()
    {
        await Task.Yield(); // Ensure UI updates before scrolling
        await utils.ScrollToSelectedItem(containerRef, "keyboard-selected");
    }


    public Task FocusAsync()
    {
        return TryFocus();
    }

    private async Task TryFocus()
    {
        if (containerRef.Context != null && containerRef.Id != null)
        {
            try
            {
                await containerRef.FocusAsync();
            }
            catch
            {
                //ignore error
            }
        }
    }
}
