@inject UserContextService contextService
@inject NavigationManager navManager
@using LMApp.Models
@using LMApp.Models.Account
@using Shared.Login

<div class="top-row navbar navbar-dark">
    <div class="container-fluid">
        @if (contextService.ActivePageShowBackButton)
        {
            <div class="btn-holder">
                <Button Icon="fa-solid fa-arrow-left" IsOutline="true" Color="Color.Secondary" class="icon-btn" OnClick="HandleBackClick" />
            </div>
        }
        <a class="navbar-brand @String.Concat(!string.IsNullOrEmpty(contextService.ActivePageTitle) ? "has-active-page " : null, Context != null ? "has-context " : null, contextService.ActivePageShowBackButton ? "with-btn" : null)" href="">
            <span class="page-title">
                @contextService.ActivePageTitle
            </span>
            <span class="account-title">
                @if (Context != null)
                {
                    @Context.BudgetName
                }
            </span>
            <span class="app-name">
                @ClientConstants.AppName
            </span>
        </a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        @if (Context != null)
        {
            <div class="nav-item px-3">
                <NavLinkExt class="nav-link" href="" Match="Models.UI.NavLinkExtMatch.PathAll">
                    Budget
                </NavLinkExt>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="accounts">
                    Accounts
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLinkExt class="nav-link" href="transactions" Match="Models.UI.NavLinkExtMatch.PathAll">
                    Transactions
                </NavLinkExt>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="transactions/unreviewed">
                    Unreviewed Transactions
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="reports">
                    Reports
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="settings">
                    Settings
                </NavLink>
            </div>
        }
        @if (AuthInfo != null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="auth">
                    Profile
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="license">
                    License
                </NavLink>
            </div>
            @if (AuthInfo.Accounts.Count > 1 && Context != null)
            {
                <hr class="nav-div" />
                @foreach (var acc in AuthInfo.Accounts.Where(x => x.Id != Context?.Id).OrderBy(x => x.Name))
                {
                    <div class="nav-item px-3">
                        <a class="nav-link" href="javascript:" @onclick="() => SwitchAccount(acc)">@acc.Name</a>
                    </div>
                }
                <hr class="nav-div" />
            }

        }
        else if (AuthInfo == null)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    Login
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="about">
                About
            </NavLink>
        </div>
    </nav>
</div>

@code {
    [CascadingParameter] public UserContext Context { get; set; }
    [CascadingParameter] public AuthUserInfo AuthInfo { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        contextService.OnActivePageChange += StateHasChanged;
    }

    private async Task SwitchAccount(LMAccountInfo account)
    {
        await contextService.ActivateLMAccount(account);
        navManager.NavigateTo($"/?bid={account.LMAccountId}");
    }

    private async Task HandleBackClick()
    {
        if (contextService.OnActivePageBack.HasValue)
        {
            await contextService.OnActivePageBack.Value.InvokeAsync();
        }
    }
}
